
# RESUMEN DEL PROYECTO
El código está escrito en inglés, ¡pero toda la conversación entre nosotros es en ESPAÑOL SIMPLE!
Escribe código limpio, simple y fácil de leer.
Implementa características de la manera más sencilla posible.
Mantén los archivos pequeños y enfocados (<200 líneas).
Prueba después de cada cambio significativo.
Enfócate en la funcionalidad principal antes de optimizar.
Usa nombres claros y consistentes.
Piensa bien antes de programar. Escribe 2-3 párrafos de razonamiento.
SIEMPRE escribe código simple, limpio y modular.
Usa un lenguaje claro y fácil de entender. Escribe en frases cortas.

# TECNOLOGÍAS
Next.js 15 (App Router y Javascript puro)
Supabase (con Javascript) (autenticación, base de datos, consultas)
TailwindCSS v4
ShadCN (con Javascript) (última versión)

# NUESTRAS VARIABLES DE ENTORNO
.env
.env.local
.env*

# ESTRUCTURA ACTUAL DE ARCHIVOS
tree -L 4 -a -I "node_modules|.git|.next" .
.
aplication-name/
├── .env.local
├── .gitignore
├── package.json
├── public/
│ ├── images/
│ └── favicon.ico
├── src/
│ ├── app/
│ │ ├── (application)/
│ │ │ ├── app/
│ │ │ │ ├── page.js
│ │ │ │ ├── layout.js
│ │ │ │ └── loading.js
│ │ ├── (marketing)/
│ │ │ ├── page.js
│ │ │ ├── pricing/
│ │ │ │ └── page.js
│ │ │ ├── about/
│ │ │ │ └── page.js
│ │ │ └── layout.js
│ │ ├── (auth)/
│ │ │ ├── login/
│ │ │ │ └── page.js
│ │ │ ├── signup/
│ │ │ │ └── page.js
│ │ │ ├── forgot-password/
│ │ │ │ └── page.js
│ │ │ └── layout.js
│ │ ├── (common)/
│ │ │ ├── 404/
│ │ │ │ └── page.js
│ │ │ ├── 500/
│ │ │ │ └── page.js
│ │ │ └── layout.js
│ │ ├── api/
│ │ │ ├── auth/
│ │ │ │ └── route.js
│ │ │ └── supabase/
│ │ │ └── client.js
│ │ ├── components/
│ │ │ ├── ui/ (shadcn/ui components)
│ │ │ │ └── ...
│ │ │ ├── auth/
│ │ │ │ ├── SupabaseAuthComponent.js
│ │ │ ├── marketing/
│ │ │ │ ├── Header.js
│ │ │ │ └── Footer.js
│ │ │ ├── application/
│ │ │ │ ├── Sidebar.js
│ │ │ │ └── Navbar.js
│ │ │ └── shared/
│ │ │ ├── ThemeToggle.js
│ │ │ └── LoadingSpinner.js
│ │ ├── hooks/
│ │ │ ├── useAuth.js
│ │ │ └── useTheme.js
│ │ ├── lib/
│ │ │ ├── supabaseClient.js
│ │ │ ├── constants.js
│ │ │ └── utils.js
│ │ ├── styles/
│ │ │ └── globals.css
│ │ └── layout.js
├── tailwind.config.js
├── postcss.config.js
└── jsconfig.json

# IMPORTANTE
Repite las instrucciones más TODO EL TIEMPO.

# PROCESO DE CORRECCIÓN DE ERRORES

¡NO SAQUES CONCLUSIONES APRESURADAS! Considera múltiples causas posibles antes de decidir.
Explica el problema en español simple.
Haz solo los cambios necesarios, modificando la menor cantidad de líneas posible.
En caso de errores extraños, pide al usuario que realice una búsqueda web en Perplexity para obtener información actualizada.

# PROCESO DE DESARROLLO

Verifica que cada nueva funcionalidad funcione explicándole al usuario cómo probarla.
NO escribas código complicado ni confuso. Opta por un enfoque simple y modular.
Si no estás seguro de qué hacer, dile al usuario que realice una búsqueda en la web.

# COMENTARIOS

SIEMPRE intenta agregar comentarios útiles y explicativos en el código.
NUNCA borres comentarios antiguos, a menos que sean claramente erróneos u obsoletos.
Incluye MUCHOS comentarios explicativos en tu código. SIEMPRE escribe código bien documentado.
Documenta todos los cambios y su razonamiento en los comentarios que escribas.
Al escribir comentarios, usa un lenguaje claro y fácil de entender. Escribe en frases cortas.






